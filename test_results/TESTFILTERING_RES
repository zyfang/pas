#################################################
# UNFILTERED									#
#################################################
1:collision
2:kitchen_table_left_collision
3:kitchen_table_right_collision
4:kitchen_table_top_collision
5:kitchen_table_stove_collision
6:pancake_maker_collision
7:hand
8:mug_collision
9:liquid_spheres
10:spatula_handle_collision
11:spatula_rest
Original SEC:
	[3983, 7911, 7915, 7921, 7925, 7986, 7992, 8007, 8021, 8057, 8072, 8089, 8160, 8196, 8228, 8242, 8398, 8417, 8455, 8493, 8532, 8566, 8585, 8615, 8695, 8728, 8748, 8808, 8868, 8888, 8928, 8954, 8985, 9005, 9084, 9144, 9164, 9182, 9348, 9359, 9395, 9403, 9420, 9426, 9429, 9438, 9441, 9447, 9450, 9457, 9461, 9465, 9471, 9477, 9481, 9483, 9490, 9492, 9518, 9520, 9526, 9528, 9532, 9551, 9555, 9566, 9574, 9581, 9587, 9593, 9823, 9842, 9873, 9892, 10050, 10153, 10174, 10220, 10237, 10249, 10280, 10300, 10320, 10341, 10625, 10644, 10684, 10745, 10766, 14791, 14792, 14793]
[1, 2]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 3]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 3]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 7]	[0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 8]	[1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]
[4, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 10]	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[4, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 8]	[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
[7, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[8, 9]	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[8, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[8, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[10, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Derived SEC:
	[3983-7911, 7911-7915, 7915-7921, 7921-7925, 7925-7986, 7986-7992, 7992-8007, 8007-8021, 8021-8057, 8057-8072, 8072-8089, 8089-8160, 8160-8196, 8196-8228, 8228-8242, 8242-8398, 8398-8417, 8417-8455, 8455-8493, 8493-8532, 8532-8566, 8566-8585, 8585-8615, 8615-8695, 8695-8728, 8728-8748, 8748-8808, 8808-8868, 8868-8888, 8888-8928, 8928-8954, 8954-8985, 8985-9005, 9005-9084, 9084-9144, 9144-9164, 9164-9182, 9182-9348, 9348-9359, 9359-9395, 9395-9403, 9403-9420, 9420-9426, 9426-9429, 9429-9438, 9438-9441, 9441-9447, 9447-9450, 9450-9457, 9457-9461, 9461-9465, 9465-9471, 9471-9477, 9477-9481, 9481-9483, 9483-9490, 9490-9492, 9492-9518, 9518-9520, 9520-9526, 9526-9528, 9528-9532, 9532-9551, 9551-9555, 9555-9566, 9566-9574, 9574-9581, 9581-9587, 9587-9593, 9593-9823, 9823-9842, 9842-9873, 9873-9892, 9892-10050, 10050-10153, 10153-10174, 10174-10220, 10220-10237, 10237-10249, 10249-10280, 10280-10300, 10300-10320, 10320-10341, 10341-10625, 10625-10644, 10644-10684, 10684-10745, 10745-10766, 10766-14791, 14791-14792, 14792-14793]
[4, 7]	[01, 10, 01, 10, 00, 00, 00, 00, 00, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
[4, 8]	[11, 11, 11, 11, 10, 01, 10, 01, 10, 00, 01, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01]
[7, 8]	[00, 01, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10]
Compressed SEC
[4, 7]	[01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10]
[4, 8]	[10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01]
[7, 8]	[01, 10]


#################################################
# FILTER AT DSEC								#
#################################################
## DOESN'T WORK! --> the changes can occur from one frame to the next, it's not the core of the problem.

######################
CODE public DerivedSEC constructDerivedSEC()

if(uniqueSet.size() > 1) //this row will be added to dsec
			{
				//add rowlabel
				rlabels.add(this.relationlabels.get(i));

				List<String> newlist = new ArrayList<String>();
				//go through list. Start with the second item, since need to know the change
				for(int j=1; j<irowlist.size(); j++) 
				{
					if(this.timelabels.get(j)-this.timelabels.get(j-1) > 100) //if the time difference is too small, don't add.
					{
						Integer last = irowlist.get(j-1);
						Integer cur  = irowlist.get(j);
						String change = last.toString() + cur.toString();
						//add the new value to the new list
						newlist.add(change);
					}
				}
				//because we're taking out changes if the difference is too small, need to check that there are still differences left in this row
				HashSet<String> stillUnique = new HashSet<String>();
				stillUnique.addAll(newlist);
				if(stillUnique.size()>1)
				{
					//add new list to the matrix
					dsec_matrix.add(newlist);
				}
			}

#######################
RESULTS

Derived SEC:
	[3983-7911, 7911-7915, 7915-7921, 7921-7925, 7925-7986, 7986-7992, 7992-8007, 8007-8021, 8021-8057, 8057-8072, 8072-8089, 8089-8160, 8160-8196, 8196-8228, 8228-8242, 8242-8398, 8398-8417, 8417-8455, 8455-8493, 8493-8532, 8532-8566, 8566-8585, 8585-8615, 8615-8695, 8695-8728, 8728-8748, 8748-8808, 8808-8868, 8868-8888, 8888-8928, 8928-8954, 8954-8985, 8985-9005, 9005-9084, 9084-9144, 9144-9164, 9164-9182, 9182-9348, 9348-9359, 9359-9395, 9395-9403, 9403-9420, 9420-9426, 9426-9429, 9429-9438, 9438-9441, 9441-9447, 9447-9450, 9450-9457, 9457-9461, 9461-9465, 9465-9471, 9471-9477, 9477-9481, 9481-9483, 9483-9490, 9490-9492, 9492-9518, 9518-9520, 9520-9526, 9526-9528, 9528-9532, 9532-9551, 9551-9555, 9555-9566, 9566-9574, 9574-9581, 9581-9587, 9587-9593, 9593-9823, 9823-9842, 9842-9873, 9873-9892, 9892-10050, 10050-10153, 10153-10174, 10174-10220, 10220-10237, 10237-10249, 10249-10280, 10280-10300, 10300-10320, 10320-10341, 10341-10625, 10625-10644, 10644-10684, 10684-10745, 10745-10766, 10766-14791, 14791-14792, 14792-14793]
[4, 7]	[01, 01, 01, 00, 00, 00, 00, 00]
[4, 8]	[11, 11, 11, 10, 10, 01, 10, 01]
[7, 8]	[00, 11, 11, 11, 11, 11, 11, 11]
Compressed SEC
[4, 7]	[01, 01, 01]
[4, 8]	[10, 10, 01, 10, 01]
[7, 8]	[]

#################################################
# FILTER AT OSEC								#
#################################################
## DOESN'T WORK WELL --> records all lasting changes, but sometimes this means that there are graphs following one another that are in fact the same

#######################
CODE changed SemanticEventChains constructor, constructOriginalSEC and processEpisodeToSEC

List<Integer> kept_important_graphs = new ArrayList<Integer>(); //which graphs haven't been filtered out
		SemanticEventChains newSEC = new SemanticEventChains(important_graphs, importanttimes, kept_important_graphs);
		//FILL SEC AND MAKE DERIVED AND COMPRESSED VERSIONS
		newSEC.constructAllSEC(important_graphs, kept_important_graphs);

public SemanticEventChains(List<SimpleWeightedGraph<String,DefaultWeightedEdge>> main_graphs, List<Long> time_labels, List<Integer> keepgraph) //using generic type for labels because not sure yet whether row/column labels are always pairs, longs, or strings
	{
		//Initialize variables for SEC
		List<List<Integer>> matrix  = new ArrayList<List<Integer>>();
		List<Pair<Integer, Integer>> relation_labels = new ArrayList<Pair<Integer, Integer>>();
		Map<Integer,String> nodenamemap = new HashMap<Integer,String>();
		//copy timelabels (otherwise multiple objects will have the same object reference to time) //This actually only occurs if you give the same time_labels for different objects, but better to be safe
		List<Long> times = new ArrayList<Long>();

		VertexNameProvider<String> nameProvider = new IntegerNameProvider<String>();
		//for every column/timestamp/main_graphs
		for(int h=0; h<time_labels.size(); h++)
		{
			if(h==0 || (time_labels.get(h)-time_labels.get(h-1) > 100))
			{
				keepgraph.add(h);
				times.add(time_labels.get(h));

				SimpleWeightedGraph<String,DefaultWeightedEdge> igraph = main_graphs.get(h);
				int nobjects = igraph.vertexSet().size();
				//System.out.println("nobjects: " + nobjects);
				for (String node : igraph.vertexSet())  //need to do this once to order them correctly
				{
					nameProvider.getVertexName(node);
				}

				//Add rows to the matrix for every possible relation by going through the nodes and adding relevant combinations with other nodes as rows
				int row_index = 0; //keeps track of which row we're on. Resets when we go to a different graph, i.e. a diferent column
				for(String node : igraph.vertexSet())
				{
					Integer current = Integer.parseInt(nameProvider.getVertexName(node));
					//add the name and number association to the nodenamemap
					nodenamemap.put(current, node);
					//the names of the relationships will be in the form of (1,1), (1,2), (1,3), (1,4), (2,3), (2,4), (3,4), so starting from your current node, you always count the second index upto how many objects you have in total
					for(int i = current+1; i <= nobjects; i++)
					{
						Pair<Integer, Integer> cur_row_label = new Pair<Integer,Integer>(current, i);
						//if this is the first column, need to initialize the list for the current row
						if(!relation_labels.contains(cur_row_label))
						{
							relation_labels.add(cur_row_label);
							matrix.add(new ArrayList<Integer>());
						}
						//add 0 to the right index
						matrix.get(row_index).add(new Integer(0));
						row_index++;
					}
				}
			}
		}
		System.out.println("Timelabels size: " + times.size());
		
		//Store graph and obtained SEC
		OriginalSEC original = new OriginalSEC(matrix, relation_labels, times, nodenamemap);
		System.out.println(times);
		this.oSEC = original;
		this.original_main_graphs = main_graphs; //store for later
	}
	
	/**
	 * Calls appropriate methods to fill Original, Derived and Compressed SEC variables according to the information
	 * in the main_graphs.
	 * 
	 * CALLS:		constructOriginalSEC(main_graphs);
	 * 				constructDerivedSEC();
	 * 				constructCompressedSEC();
	 * CALLED BY:	-
	 * 
	 * @param main_graphs
	 */
	public void constructAllSEC(List<SimpleWeightedGraph<String,DefaultWeightedEdge>> main_graphs, List<Integer> keptgraphs)
	{
		constructOriginalSEC(main_graphs, keptgraphs);
		this.dSEC = oSEC.constructDerivedSEC();
		this.cSEC = dSEC.constructCompressedSEC();
	}

	/**
	 * Fills OriginalSEC with values according to main_graphs. For now only encode contact yes/no (1/0).
	 * Later will add more types of relationships.
	 * 
	 * CALLS:		labelIndex
	 * CALLED BY:	constructAllSEC
	 * 
	 * @param main_graphs
	 */
	public void constructOriginalSEC(List<SimpleWeightedGraph<String,DefaultWeightedEdge>> main_graphs, List<Integer> keepgraph)
	{
		//can't use int or double here because primitives are not supported by Generics.
		VertexNameProvider<String> nameProvider = new IntegerNameProvider<String>();
		//for every important graph/timestep
		int counter=0;
		for(int i = 0; i< main_graphs.size(); i++)
		{
			System.out.println("#############################");
			System.out.println(keepgraph.toString());
			if(keepgraph.contains(i))
			{
				org.jgrapht.graph.SimpleWeightedGraph<String,DefaultWeightedEdge> igraph = main_graphs.get(i);
				// assign ids in vertex set iteration order. Checked and the order of numbers will be WRONG if don't do this first.
				for (String node : igraph.vertexSet()) 
				{
					nameProvider.getVertexName(node);
				}

				//these are the only non-zero elements in this column
				Set<DefaultWeightedEdge> edges = igraph.edgeSet(); 
				//Collection<String> test = Collections.unmodifiableSet(new Set<String>());
				for(DefaultWeightedEdge iedge : edges)
				{
					String from = igraph.getEdgeSource(iedge);
					String to = igraph.getEdgeTarget(iedge);
					//convert to numbers
					Integer fromNumber = Integer.parseInt(nameProvider.getVertexName(from));
					Integer toNumber = Integer.parseInt(nameProvider.getVertexName(to));

					//because Pairs are ordered, need to have the right order for the key to work. The way the map is initialized, the smaller number always comes first
					Pair<Integer, Integer> cur_row_index;
					if(fromNumber>toNumber)
					{
						cur_row_index = new Pair<Integer,Integer>(toNumber,fromNumber); 
					}
					else
					{
						cur_row_index = new Pair<Integer,Integer>(fromNumber, toNumber); 
					}
					Integer rel_value = new Integer((int)igraph.getEdgeWeight(igraph.getEdge(from, to))); //TODO part of encoding more relations
					int currentindex = MyUtil.labelIndex(cur_row_index, this.oSEC.relationlabels);

					//				if(i==3 || i==4)
					//				{
					//					System.out.println("i: " + i);
					//					System.out.println(igraph.toString());
					//					System.out.println("from: " + from + " - " + fromNumber);
					//					System.out.println("to: " + to + " - " + toNumber);
					//					System.out.println("Value: " + rel_value);
					//				}
					this.oSEC.SECmatrix.get(currentindex).set(counter, rel_value);
				}
				this.getOSEC().printSEC();
				System.out.println(counter);
				System.out.println(i);
				counter++;
			}
		}
	}


#######################
RESULTS

Original SEC:
	[3983, 7911, 8398, 9348, 9823, 10050, 10153, 10625, 14791]
[1, 2]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 3]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 3]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 7]	[0, 1, 1, 1, 0, 0, 0, 0, 0]
[4, 8]	[1, 1, 1, 1, 0, 0, 1, 0, 1]
[4, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 10]	[1, 1, 1, 1, 1, 1, 1, 1, 1]
[4, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 8]	[0, 0, 1, 1, 1, 1, 1, 1, 1]
[7, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[8, 9]	[1, 1, 1, 1, 1, 1, 1, 1, 1]
[8, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[8, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
[10, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0]
Derived SEC:
	[3983-7911, 7911-8398, 8398-9348, 9348-9823, 9823-10050, 10050-10153, 10153-10625, 10625-14791]
[4, 7]	[01, 11, 11, 10, 00, 00, 00, 00]
[4, 8]	[11, 11, 11, 10, 00, 01, 10, 01]
[7, 8]	[00, 01, 11, 11, 11, 11, 11, 11]
Compressed SEC
[4, 7]	[01, 10]
[4, 8]	[10, 01, 10, 01]
[7, 8]	[01]



#################################################
# FILTER AT MAINGRAPHS1							#
#################################################
## WORKS KIND OF --> the changes are right, but there is still a lot of noise. Basically, if it keeps switching around, after 100 steps (the threshold), it will pick up the fluctuation again. 

#######################
CODE changed SemanticEventChains constructor, constructOriginalSEC and processEpisodeToSEC


	public List<SimpleWeightedGraph<String,DefaultWeightedEdge>> extractMainGraphs(List<SimpleWeightedGraph<String,DefaultWeightedEdge>> allgraphs, List<Long> graphtimes, List<Long> importanttimes)
	{
		List<SimpleWeightedGraph<String,DefaultWeightedEdge>> mainGraphs = new ArrayList<SimpleWeightedGraph<String,DefaultWeightedEdge>>();
		System.out.println(graphtimes);
		SimpleWeightedGraph<String,DefaultWeightedEdge> prev_graph = null;
		//convert graph to adjacency matrix, them compute eigenvalues and check with previous eigenvalues whether graphstructure has changed
		//if it changed, store graph. If it didn't, go to next one.
		double[] prev_eig =null;
		for(int i=0; i<allgraphs.size(); i++)
		{
			SimpleWeightedGraph<String,DefaultWeightedEdge> igraph = allgraphs.get(i);
//			System.out.println("Graph at time " + importanttimes + ": " + mainGraphs.toString());
			if (prev_graph == null) //the first graph
			{
				//TODO: this needs to be uncommented again (?) --> don't store the very first graph because nothing is touching anything in it and it's only the very first timestamp. The way things are inititialized a lot of stuff will show up that's not actually important to the action.
//				mainGraphs.add(igraph);
//				importanttimes.add(graphtimes.get(i));
				prev_graph = (SimpleWeightedGraph<String, DefaultWeightedEdge>) igraph.clone();
				prev_eig = graphToEigenvalue(prev_graph); //TODO add other relations + check whether eigenvalues change if the values change (e.g. whether it detects all changes)
				//				System.out.println("Storing " + i);
			}
			else
			{
				if(prev_eig == null)
				{
					System.err.println("ERROR: prev_eigen is null when prev_graph is not.");
				}
				double[] cur_eig = graphToEigenvalue(igraph);
				if(!Arrays.equals(prev_eig, cur_eig) && (importanttimes.size()==0 || (graphtimes.get(i)-importanttimes.get(importanttimes.size()-1) > 100)))//if the eigenvalues are not the same, it means something in the structure of the graph changed
				{
						mainGraphs.add(igraph);
						importanttimes.add(graphtimes.get(i));
						//											System.out.println("Storing " + i);
						prev_graph = (SimpleWeightedGraph<String, DefaultWeightedEdge>) igraph.clone();
						prev_eig = cur_eig;
				}
				
			}
		}		
		return mainGraphs;
	}

#######################
RESULTS

1:collision
2:kitchen_table_left_collision
3:kitchen_table_right_collision
4:kitchen_table_top_collision
5:kitchen_table_stove_collision
6:pancake_maker_collision
7:hand
8:mug_collision
9:liquid_spheres
10:spatula_handle_collision
11:spatula_rest
Original SEC:
	[3983, 7911, 8015, 8117, 8228, 8341, 8455, 8566, 8695, 8808, 8928, 9044, 9164, 9277, 9395, 9496, 9823, 9930, 10050, 10153, 10280, 10394, 10625, 10745, 10852, 14791, 14893]
[1, 2]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 3]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[1, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 3]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[2, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 4]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[3, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 5]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 7]	[0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 8]	[1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1]
[4, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[4, 10]	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[4, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 6]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[5, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 7]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 8]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[6, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 8]	[0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]
[7, 9]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[7, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[8, 9]	[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[8, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[8, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 10]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[9, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
[10, 11]	[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
Derived SEC:
	[3983-7911, 7911-8015, 8015-8117, 8117-8228, 8228-8341, 8341-8455, 8455-8566, 8566-8695, 8695-8808, 8808-8928, 8928-9044, 9044-9164, 9164-9277, 9277-9395, 9395-9496, 9496-9823, 9823-9930, 9930-10050, 10050-10153, 10153-10280, 10280-10394, 10394-10625, 10625-10745, 10745-10852, 10852-14791, 14791-14893]
[4, 7]	[01, 10, 00, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00]
[4, 8]	[11, 10, 01, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 11]
[7, 8]	[00, 01, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 10]
Compressed SEC
[4, 7]	[01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10]
[4, 8]	[10, 01, 10, 01, 10, 01, 10, 01, 10, 01, 10, 01]
[7, 8]	[01, 10]